<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>Binary Canon</title><subtitle>How far can we push games into the pedagogical realm while keeping players immersed?</subtitle> <updated>2023-01-02T05:31:51+08:00</updated> <author> <name>Binary Canon</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 Binary Canon </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Game Balance in a Grand Strategy Game - Basic Economy Approach</title><link href="/posts/game-balance-in-a-grand-strategy-game-basic-economy-approach/" rel="alternate" type="text/html" title="Game Balance in a Grand Strategy Game - Basic Economy Approach" /><published>2022-07-01T23:00:00+08:00</published> <updated>2023-01-02T05:27:50+08:00</updated> <id>/posts/game-balance-in-a-grand-strategy-game-basic-economy-approach/</id> <content src="/posts/game-balance-in-a-grand-strategy-game-basic-economy-approach/" /> <author> <name>Binary Canon</name> </author> <category term="Game Design" /> <summary> Intro Games are complex. How complex can they be? Can they simulate complex systems? Are some equations with variables enough? Enough for what? In the last couple of weeks, I’ve been exploring Game Balance. Specifically equations. Balancing Economy Variables Balancing a game requires the balance of all the game’s systems. I believe balancing a game’s economy is a small scale of rules based on... </summary> </entry> <entry><title>Storing Data Efficiently using Test-Driven-Development in Godot</title><link href="/posts/storing-data-efficiently-in-godot-copy/" rel="alternate" type="text/html" title="Storing Data Efficiently using Test-Driven-Development in Godot" /><published>2022-06-10T23:00:00+08:00</published> <updated>2023-01-02T05:27:50+08:00</updated> <id>/posts/storing-data-efficiently-in-godot-copy/</id> <content src="/posts/storing-data-efficiently-in-godot-copy/" /> <author> <name>Binary Canon</name> </author> <category term="Programming" /> <summary> Intro Decoupling is a software design term for removing dependencies between modules. According to this concept, the fewer modules depend on other modules, the better the overall management of the codebase. I will try to show my approach to storing data efficiently in Godot using this concept. My goal: load data from a JSON file and store it for easy access in the game. Wikipedia about Coup... </summary> </entry> <entry><title>Designing Initial User-Interface for a Grand Strategy Game, Considering UX.</title><link href="/posts/designing-initial-user-Interface-for-a-grand-strategy-game-considering-ux-copy/" rel="alternate" type="text/html" title="Designing Initial User-Interface for a Grand Strategy Game, Considering UX." /><published>2022-06-03T23:00:00+08:00</published> <updated>2023-01-02T05:27:50+08:00</updated> <id>/posts/designing-initial-user-Interface-for-a-grand-strategy-game-considering-ux-copy/</id> <content src="/posts/designing-initial-user-Interface-for-a-grand-strategy-game-considering-ux-copy/" /> <author> <name>Binary Canon</name> </author> <category term="Art" /> <category term="User Interface" /> <summary> Terminology There’s a debate about precise definitions in this field since it’s relatively new (20-30 years). Here’s my attempt to define some terms in the context of the software world: User Interface (UI) - A user interface (UI, e.g. a command line) or a graphical user interface (GUI) where the user interacts with the software. User Interaction - Includes UI and concerns about HOW users... </summary> </entry> <entry><title>Setting Map Shaders with GDScript &amp; Visual Graphs</title><link href="/posts/setting-map-shaders-with-gdscript-and-visual-graphs-copy/" rel="alternate" type="text/html" title="Setting Map Shaders with GDScript &amp; Visual Graphs" /><published>2022-05-27T23:00:00+08:00</published> <updated>2023-01-02T05:27:50+08:00</updated> <id>/posts/setting-map-shaders-with-gdscript-and-visual-graphs-copy/</id> <content src="/posts/setting-map-shaders-with-gdscript-and-visual-graphs-copy/" /> <author> <name>Binary Canon</name> </author> <category term="Programming" /> <category term="Map" /> <summary> Intro My goal is to create a responsive shader for both mouse hovering and selection. Godot’s visual shaders are neat and show a preview of each of their operation. Moreover, it outputs the shader’s source code if you need to verify the calculations or manipulate a copy of it. Breakdown Each node will be explained below Breakdown of Each Node The shader starts with the texture input. The t... </summary> </entry> <entry><title>Creating 2.5D Clickable Map with Borders in Godot</title><link href="/posts/creating-25D-clickable-maps-with-borders-in-godot/" rel="alternate" type="text/html" title="Creating 2.5D Clickable Map with Borders in Godot" /><published>2022-05-20T23:00:00+08:00</published> <updated>2023-01-02T05:27:50+08:00</updated> <id>/posts/creating-25D-clickable-maps-with-borders-in-godot/</id> <content src="/posts/creating-25D-clickable-maps-with-borders-in-godot/" /> <author> <name>Binary Canon</name> </author> <category term="Programming" /> <category term="Map" /> <summary> Collision Detection Using a Color Map After some searching, I saw an interesting way to create a clickable map that seems efficient and composed of two maps. The first is visible without any collision detection (our wireframe), and the second is in front with a unique color for each country, and it has a collider. Then, we check the pixel color from the mouse’s position; if it’s pink, we know ... </summary> </entry> </feed>
