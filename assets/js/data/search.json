[ { "title": "Game Balance in a Grand Strategy Game - Basic Economy Approach", "url": "/posts/game-balance-in-a-grand-strategy-game-basic-economy-approach/", "categories": "Game Design", "tags": "economy system", "date": "2022-07-01 23:00:00 +0800", "snippet": "IntroGames are complex. How complex can they be? Can they simulate complex systems? Are some equations with variables enough? Enough for what?In the last couple of weeks, I’ve been exploring Game Balance. Specifically equations.Balancing Economy VariablesBalancing a game requires the balance of all the game’s systems. I believe balancing a game’s economy is a small scale of rules based on the research and philosophy of Adam Smith and John Maynard Keynes (however, when it comes to social sciences, we are stuck..?) Here I will talk about my approach for using variables to impact other variables; How to balance “unrest” to affect “optimism.”Some Math In this section, I’m using Desmos calculator.Assuming “unrest” and “optimism” are normalized (0-1.0), we need a function whose outputs will correspond to a scale of a whole floating number as well.Our component, which represents x, is the unrest variable in this case. \\(cos(component)\\) can do that with some changes: \\(\\frac{1}{2}cos(component)+\\frac{1}{2}\\) This function will output values between (0-1.0)We are multiplying by PI to set its equilibrium at 0.5 instead of PI, which isn’t helpful since we are dealing with normalized scales (0-1.0).\\(\\frac{1}{2}cos(component \\cdot \\pi)+\\frac{1}{2}\\) Multiplying by PI to set its equilibrium at 0.5Let’s say I want “unrest” to impact “optimism.” First, I need unrest to deal negative and positive points so it can impact optimism with positive and negative weights. To do that, I will remove the last part of the function (\\(\\frac{1}{2}\\)).The range is now from -0.5 to 0.5:Ranges from -0.5 to 0.5Remember the equilibrium is still the same at 0.5: \\(\\frac{1}{2}cos(component \\cdot \\pi)=0\\) Anything below 0.5 will output a negative number. Anything above 0.5 outputs a positive one.That doesn’t make sense because when unrest goes down, optimism should go up.Let’s negate the function:\\(-\\frac{1}{2}cos(unrest \\cdot \\pi)\\) The range is now from -0.5 to 0.5:Negating the functionNow when unrest is below 0.5, we have a positive output, and when it’s above 0.5, the output is negative.All left to do is to determine the weight of unrest on optimism. Let’s calculate the optimism with weights.Assuming we want unrest to affect optimism by a weight of 30%, we will have:\\(optimism = 0.3 \\cdot unrest ...\\) Converting to the cosine formula: \\(-\\frac{1}{2}cos(unrest \\cdot \\pi)\\cdot 0.3\\) Then we add other variables - all their weights will sum to 1.0:\\(optimism = 0.3 \\cdot unrest + 0.4 \\cdot variable_b + 0.3 \\cdot variable_c\\) It’s also called weighted average. Watch on YouTube..If we have an aggregate values, such as resources (electricity, water, currency, etc) we can use the following:\\(value+value(weight_1 \\cdot variable_1 + weight_2 \\cdot variable_2)\\) We can use the weighted average to constrain values in relation to their previous value so changes will look relative:\\(Electricity_{previous} + Electricity_{previous} \\cdot (weight \\cdot residential + weight \\cdot industries)\\) Further infoWhy multiply the component with PI?Since I’m using scales from 0-1.0, I want to ensure that if 1.0 is the input, the function will output its maximum output as well (0.5 in this case)—the same with 0, which will output -0.5.Why cosine?In this case, I wanted a straightforward function that maps inputs of 0-1.0 to negative and positive outputs. Exploring functions is a key to balancing a game. I’m still learning this stuff, though.Game Balance ResourcesSpreadsheets are a straightforward way to design game economy. They are frequently utilized to balance different game systems as a whole. Here are a few further resources:Ian Schreiber on Game Balance: youtu.be/tR-9oXiytskSchreiber's book: google.com/books/edition/Game_Balance/g301EAAAQBAJGame Balance using spreadsheets: youtu.be/WqfZV2Wlb1gReadable version: jameystevenson.comFunction generator: cubic-bezier.comThe best designers stay in the lowest possible fidelity as much as possible. -Jamal Update: I don’t like it for simulating anything related something bing and complicated as economy. However, it might be enough for some games." }, { "title": "Storing Data Efficiently using Test-Driven-Development in Godot", "url": "/posts/storing-data-efficiently-in-godot-copy/", "categories": "Programming", "tags": "data structures", "date": "2022-06-10 23:00:00 +0800", "snippet": "IntroDecoupling is a software design term for removing dependencies between modules. According to this concept, the fewer modules depend on other modules, the better the overall management of the codebase.I will try to show my approach to storing data efficiently in Godot using this concept.My goal: load data from a JSON file and store it for easy access in the game. Wikipedia about Coupling.The ProcessCreating a new resourceFirst, I created a new resource and gave it the name JSON_DB.tresIn Godot, resources are great for storing data since the engine only loads them once. Any copy resource will point to the same original resource and will not create a new one in memory.Creating a new resource.Giving the resource a name.Now, adding a script to the resource:Adding a script to the resource.The Scriptextends Resourceclass_name JSON_DB# ======== PRIVATE ========var _database : Dictionary = {}var _string_to_var : Array = []# ======== Constructor ======== func _init(json_path=\"\", json_strings_to_var=[]):\t# Load JSON from path\tvar file = File.new()\tfile.open(json_path, file.READ)\t_database = parse_json(file.get_as_text())\tfile.close()\t\t# Which JSON's strings should be converted to variables\t_string_to_var = json_strings_to_var# ======== PUBLIC ========func get_dict():\treturn _databasefunc get_values_first_key():\tvar dict_all_keys = _database.keys()\treturn _database.get(dict_all_keys.front())func get_values(key):\tif _database.keys().has(key):\t\treturn _database[key]\treturn nullfunc get_nested_values(key, val):\tif _database.keys().has(key): # Key (country) exists?\t\tif _database[key].has(val): # Value exists?\t\t\t# If variable, convert from string\t\t\tfor variable in _string_to_var:\t\t\t\tif String(_database[key][val]).find(variable) != -1:\t\t\t\t\treturn str2var(_database[key][val])\t\t\treturn _database[key][val]\treturn nullSome points:1) The database is a dictionary. It will contain unique values for each country.2) The Constructor loads the JSON to this dictionary and converts variables specified in _string_to_var, such as Color(), to variables, as I will show below.3) In the Public section there are several methods to access this dictionary. For now, I assume all the data I need is in this JSON file. Later I will add functions to set and change data.Since JSON_DB will be used as a base for various data structures, I will create a dedicated database for the countries. Here’s my Countries_DB.gd:extends \"res://Resources/Database/JSON_DB/JSON_DB.gd\"class_name Countries_DBfunc _init(json_path=\"\", json_strings_to_var=[]).(json_path, json_strings_to_var):\tpass The syntax for _init is derived from inner classes in Godot.The JSON File (countries.json){ \"Brazil\": { \"color\": \"Color(0,1,0)\", \"stat\": 1 }, \"Chile\": { \"color\": \"Color(1,1,1)\", \"stat\": 2 }}In this JSON file, there’s a color variable. In the script earlier, get_nested_values will check if we specified any variables in _string_to_var (actually, the constructor does it) and if so, it will convert them to variables using the built-in str2var.Testing using test-driven-development.GUT is a test-driven development tool for Godot. It works well, and I will use it to test this script.The test-driven script:extends \"res://addons/gut/test.gd\"var _file_path = \"res://JSON_FILES/countries.json\"var _countries_DB = nullvar _values_first_line = nullvar _key_first_country = nullvar _key_second_country = nullvar _values_second_country = nullvar _color_first_country = nullvar _color_second_country = nullfunc before_each():\t\t_values_first_line = \"{color:Color(0,1,0), stat:1}\"\t_key_first_country = \"Brazil\"\t_key_second_country = \"Chile\"\t_values_second_country = \"{color:Color(1,1,1), stat:2}\"\t_color_first_country = Color(0,1,0)\t_color_second_country = Color(1,1,1)\t # Here I specifies the variables which should be converted (Color)\t_countries_DB = Countries_DB.new(_file_path, [\"Color\",])\tfunc after_each():\tpassfunc test_creating_Countries_instance():\tassert_not_null(_countries_DB, \"Should not be null\")func test_get_dict_not_null():\tassert_not_null(_countries_DB.get_dict())func test_get_dict_returns_dict():\tassert_typeof(_countries_DB.get_dict(), TYPE_DICTIONARY)func test_DB_first_line():\tvar values_first_line = String(_countries_DB.get_values_first_key())\tassert_eq(values_first_line, _values_first_line)func test_DB_second_line():\tvar values_second_country = _countries_DB.get_values(_key_second_country)\tvalues_second_country = String(values_second_country)\tassert_eq(values_second_country, _values_second_country)func test_DB_first_line_nested_value():\tvar color_first_country = _countries_DB.get_nested_values(_key_first_country, \"color\")\tassert_eq(color_first_country, _color_first_country)func test_DB_second_line_nested_value():\tvar color_second_country = _countries_DB.get_nested_values(_key_second_country, \"color\")\tassert_eq(color_second_country, _color_second_country)" }, { "title": "Designing Initial User-Interface for a Grand Strategy Game, Considering UX.", "url": "/posts/designing-initial-user-Interface-for-a-grand-strategy-game-considering-ux-copy/", "categories": "Art, User Interface", "tags": "ui", "date": "2022-06-03 23:00:00 +0800", "snippet": "TerminologyThere’s a debate about precise definitions in this field since it’s relatively new (20-30 years). Here’s my attempt to define some terms in the context of the software world:User Interface (UI) - A user interface (UI, e.g. a command line) or a graphical user interface (GUI) where the user interacts with the software.User Interaction - Includes UI and concerns about HOW users interact with our software and WHY they interact with it in these particular ways. Designing User Interaction is often based on user research and NOT personal beliefs and preferences. Human-computer interaction (HCI) is one of the most studied topics and includes fields such as graphic, speech, and touch interactions.User Experience (UX) - Includes User Interaction and has a broader scope to understand HOW users experience our software from three core views: behavior, form, and content. In the context of games, our research is usually in the form of play-testing sessions.User Interaction is part of User Experience I will mainly talk about User Interaction (visual interaction), and based on my findings, I will design my first sketch for a User Interface. I have no previous experience designing user interfaces, and I appreciate any feedback.When it comes to User Experience (UX), it’s all over the place in games: animations, sound design, content, and User Interface (UI/GUI).In the graph above, while we can see fields such as sound design as part of the User Experience (UX), it has nothing to do with User Interface (UI) and User Interaction (Behavior bubble). Why? Since it won’t impact the behavior of the users with our interface (unless we put some harsh noise and users will avoid clicking buttons). However, we can add sound effects as additional assets to the user interface (Content bubble) to increase immersion.Let’s focus on the User Interaction definition. Answering the WHY question is not easy. It requires research and qualitative tools such as interviews to crack the logic of WHY users behave in specific ways with our software. Without this feedback, we often attempt to solve problems based on our beliefs and preferences instead of evidence. After gathering evidence, we build our hypothesis, test it, and reiterate it repeatedly. Since there is no final state in UX - we keep learning and improving.User Interface emerged from Classical Graphic Design and used to be associated with a final product to deliver. However, since websites and apps constantly change today, the design is never final. With games, it’s tricky since we deliver a final product. So there must be an end state. Games are a slightly different medium; they’re somewhere between those two approaches:Traditional Classical Design with final delivery (print, architecture).User Interaction with an iterative mindset (websites, apps).That’s why games have the room for artistic finishes to help design the mood of the entire experience and contribute to the overall immersion. Still confused? try this youtube video by NNg.Low-fidelity PrototypeChoosing the LayoutBefore searching for any inspiration, I made a basic layout in draw.io to understand what I needed in the UI.This specification of elements will help me create the design around the user’s needs. This approach also known as user-centered design.Jamal Nichols says in his courses (linked below): “The best designers stay in the lowest possible fidelity, for as long as possible”. I like this statement - it can easily be translated to Game Design and gives me the freedom to make rapid changes in no time.The best designers stay in the lowest possible fidelity, for as long as possible.InspirationAfter a simple specification in mind, I explored some designs in Game UI Database. Crusader Kings 3 isn’t there at the time of writing, but I was inspired by its UI, combined with Anno 1800. Both UIs are clean and modern yet have an artistic vision and are not entirely flat.CK3 UIAnno 1800 UIChoosing Base ColorsSince I like the base color of Godot’s UI, I chose it, changed it a bit, and expanded my palette using mycolor.space.Google’s material design helped me understand HOW to use colors in the UI; contrast, primary and secondary colors, and accessible colors.Medium-fidelity PrototypeFrom draw.io to KritaI couldn’t help it, and I wanted to jump into Krita and create a medium-fidelity prototype before the entire wireframe was ready. I also think it’s fine to do so; it’s a game with many UIs and elements. Also, It already took me several weeks of iterations in the Game Design Document (along with other game mechanics).At this point, I knew I wanted to make the UI as concise as possible - I didn’t want the user to look for different corners on the screen to forward the game’s clock. I want everything to be in front of him. Therefore, the top panel will have all the necessary information and controls, and the side panel will contain the game mechanics. There’s also a plan for bottom menus, but these are still in their low-fidelity stage.Small DetailsAccording to NNg, taking elements from the real world helps build experiences that feel intuitive (linked below).So here is the time to take elements from the real world and convert the wireframe into a medium-fidelity prototype. First, since the left panel will contain various options and details about specific countries, a leather book feels intuitive and classic to me. I’ve used textures from PolyHaven to create the feeling of a leather book.The top panel is more artistic, but it follows the repetition of the left panel, and it contains the same texture and colors. The game controls will be placed just below it in the flag’s section. I slightly bent the top menu to break its square shape and added some depth and fine lines.Medium-fidelity PrototypeHigh-fidelity PrototypeFrom Krita to GodotI implemented a very basic version of it in the game and stopped after a while since I realized any change would take a while if the layout will change every now and then. I’m still in the low-fidelity prototype, and once I have the basic layout, I will implement it in the Godot.And.. back to low-fidelityIteration is the key. I just created a simple layout to try and feel the game. Now the real low-fidelity work begins. Resources: Game UI Database, NNg’s blog, Jamal Nichols’s courses" }, { "title": "Setting Map Shaders with GDScript & Visual Graphs", "url": "/posts/setting-map-shaders-with-gdscript-and-visual-graphs-copy/", "categories": "Programming, Map", "tags": "shaders", "date": "2022-05-27 23:00:00 +0800", "snippet": "IntroMy goal is to create a responsive shader for both mouse hovering and selection. Godot’s visual shaders are neat and show a preview of each of their operation. Moreover, it outputs the shader’s source code if you need to verify the calculations or manipulate a copy of it.BreakdownEach node will be explained belowBreakdown of Each NodeThe shader starts with the texture input.The texture is a PNG with a blank background, so it's crucial to set the shader's Depth Draw to alpha_prepass. Otherwise, you won't see a transparent background.ColorUniform is a dynamic color I control from GDScript. It changes based on the country's color. More about Uniforms.Node number 3 is being used instead of node number 2. I must do that to show the preview of the other nodes. Otherwise, they will be blank.We take the input texture and the color we want to use (node number 3 for now) and utilize the Darken function. The Darken function takes the lowest value between the two inputs, so it will choose the red since its vector is Color(1,0,0) while the white's Color(1,1,1).To calculate the border, we can use the difference between the colored texture and its alpha (empty background). Note: I have a border on the sprite, and you must have one to make it work - the black border will stay after calculating the difference since it overlaps with the background's value.I scale its color slightly to give it more emphasis (not necessary, just experimentation).Since we only have the alpha channel, the border is white. To change it to red, I use the Darken function again, which chooses the smallest color value (same as node num. 2).A boolean which I control from GDScript. All Uniform variables are accessible from GDScript.The Albedo color. If IsOutlined is true, it will choose the nodes' path with green numbers (border). Otherwise, it will choose the nodes with red numbers above them. Either way, it colors the sprite in red.This node controls the alpha channel (sprite's transparency). If IsOutlined is true, continue to read about node number 11. Otherwise, set it to 0.25 opacity for the mouse-hover effect (1*0.25).The sprite's alpha channel is forwarded from node num 1 to this node. If it receives a true value from node number 10 (IsOutlined aka border to be shown), we multiply by the difference, which is node number 6. Let's think about it; The border has a value of 1 (white), and everything else is 0 (black).We need to eliminate everything else that is not the border. When we multiply the sprite's alpha with node number 6, each white pixel is multiplied by 0 (black/transparent) and won't be shown, except the border, which is 1, and its corresponding section from node number 6, which is also 1. Connecting node 6 to 7 colors it with red.The Final GraphUsing node 2 instead of node 3 There is only one change, instead of using node number 3 I’m using node number 2 as a Uniform variable controlled from GDScript.Controlling the shader using GDScriptControlling Uniform variables from GDScript depends on which type of shader you are working on. For this case, a Visual Shader on 3DSprite (GeometryInstance), I use:$Sprite.material_override.set_shader_param(\"IsOutlined\", true)$Sprite.material_override.set_shader_param(\"ColorAlbedoUniform\", Color.red)DemoOptimizing GIFs for web is a headache, I tried my best :/" }, { "title": "Creating 2.5D Clickable Map with Borders in Godot", "url": "/posts/creating-25D-clickable-maps-with-borders-in-godot/", "categories": "Programming, Map", "tags": "interactive map", "date": "2022-05-20 23:00:00 +0800", "snippet": "Collision Detection Using a Color MapAfter some searching, I saw an interesting way to create a clickable map that seems efficient and composed of two maps. The first is visible without any collision detection (our wireframe), and the second is in front with a unique color for each country, and it has a collider. Then, we check the pixel color from the mouse’s position; if it’s pink, we know it’s Australia. We can scale it down to countries, then regions, etc. Here’s the example from StackExchange:Map of all countriesEach region will have a unique colorUnderstanding the WorkflowGodot workflowI created the following workflow:TextureMap and CountriesWireframe are simple 3DSprites. HiddenColorData is a QuadMesh I manually scaled to the size of the TextureMap, and it has a collider that will be used for get_pixel().Code SnippetsI encountered an excellent post on Reddit which already implemented what I wanted. I mainly used the asset the author highlighted for camera calculations with ray casting: we perform a ray cast from the camera to the point on the invisible (color) map, then it gets the pixel and we decide what this pixel means (which country was selected).onready var _hidden_quad_color_data = $HiddenColorDatafunc _ready():\t# Load the color-coded map to the QuadMesh (HiddenQuadColorData) and lock it so we can pick its colors.\tvar temp_texture = ImageTexture.new()\tvar temp_image = Image.new()\ttemp_image.load(\"res://Assets/Maps/Images/World Map/world_map_colors.png\")\ttemp_texture.create_from_image(temp_image)\t_hidden_color_map_ = temp_texture.get_data()\t_hidden_color_map_.lock()Here are the maps, currently only Brazil has a color (green):A visible map which will be shown to the playerA hidden map with unique colors for each country. Only Brazil for nowCamera movement:func _physics_process(delta):\t# Define -1 to +1 direction changes\tcam_direction.x = (-int(Input.is_action_pressed(\"map_left\")) + int(Input.is_action_pressed(\"map_right\")))\tcam_direction.y = (-int(Input.is_action_pressed(\"map_down\")) + int(Input.is_action_pressed(\"map_up\")))\tcam_direction.z = (-int(Input.is_action_pressed(\"map_zoom_in\")) + int(Input.is_action_pressed(\"map_zoom_out\")))\tcam_direction = cam_direction.normalized()\t\t# Interpolate velocity and modify cam position\tcam_velocity = cam_velocity.linear_interpolate(cam_direction * cam_speed, cam_acceleration * delta)\t_camera.transform.origin += cam_velocityHandling hover and click event:func _unhandled_input(event):\t# Handling both hover and click\t# InputEventMouseButton &amp; InputEventMouseMotion different logic!\tif event is InputEventMouseButton or event is InputEventMouseMotion:\t\tif _hidden_color_map_ == null: return false\t\t# Get mesh size to detect edges and make conversions\t\t# This code only support PlaneMesh and QuadMesh\t\tvar quad_mesh_size = _hidden_quad_color_data.mesh.size\t\t\t\t# Find mouse position in Area\t\tvar from = _camera.project_ray_origin(event.global_position)\t\tvar dist = 100\t\tvar to = from + _camera.project_ray_normal(event.global_position) * dist\t\tvar result = get_world().direct_space_state.intersect_ray(from, to, [], _hidden_quad_color_data.get_child(0).collision_layer,false,true)\t\tvar mouse_pos3D = null\t\tif result.size() &gt; 0: mouse_pos3D = result.position\t\t# Check if the mouse is outside of bounds, use last position to avoid errors\t\t# NOTE: mouse_exited signal was unreliable in this situation\t\tvar is_mouse_inside = (mouse_pos3D != null)\t\tif is_mouse_inside:\t\t\t# Convert click_pos from world coordinate space to a coordinate space relative to the Area node.\t\t\t# NOTE: affine_inverse accounts for the Area node's scale, rotation, and translation in the scene!\t\t\tmouse_pos3D = _hidden_quad_color_data.get_child(0).global_transform.affine_inverse() * mouse_pos3D\t\t\t_last_mouse_pos3D = mouse_pos3D\t\telse:\t\t\tmouse_pos3D = _last_mouse_pos3D\t\t\tif mouse_pos3D == null:\t\t\t\tmouse_pos3D = Vector3.ZERO\t\t# convert the relative event position from 3D to 2D\t\tvar mouse_pos2D = Vector2(mouse_pos3D.x, -mouse_pos3D.y)\t\t# Right now the event position's range is the following: (-quad_size/2) -&gt; (quad_size/2)\t\t# We need to convert it into the following range: 0 -&gt; quad_size\t\tmouse_pos2D.x += quad_mesh_size.x / 2.0\t\tmouse_pos2D.y += quad_mesh_size.y / 2.0\t\t# Then we need to convert it into the following range: 0 -&gt; 1\t\tmouse_pos2D.x = mouse_pos2D.x / (quad_mesh_size.x)\t\tmouse_pos2D.y = mouse_pos2D.y / (quad_mesh_size.y)\t\t# Finally, we convert the position to the following range: 0 -&gt; _hidden_color_map_.size\t\tmouse_pos2D.x = mouse_pos2D.x * _hidden_color_map_.get_width()\t\t\tmouse_pos2D.y = mouse_pos2D.y * _hidden_color_map_.get_height()\t\t\t\t# Detect country color code\t\tvar px_color = _hidden_color_map_.get_pixelv(mouse_pos2D)\t\t\t\t# Decide what to do\t\tif event is InputEventMouseButton:\t\t\tmouse_button_country_handler(px_color)\t\telif event is InputEventMouseMotion:\t\t\tmouse_motion_country_handler(px_color)By the time of writing this post, I already created a shader to select countries (I’ll write about it next). The code below refers to that shader:_current_selected_country = null # Should be at the top of your script# If the country clicked, create a border. func mouse_button_country_handler(country_color_code): if country_color_code == Color(0,1,0) \\ # Green color\tand _current_selected_country != \"Brazil\":\t\t_brazil.material_override.set_shader_param(\"IsOutlined\", true)\t\t# Store locally the current selected country \t\t_current_selected_country = \"Brazil\"\telif country_color_code != Color(0,1,0): # Green color\t\t# Reset selection effect\t\t_current_selected_country = null\t\t_brazil.material_override.set_shader_param(\"IsOutlined\", false)\t\t_brazil.material_override.set_shader_param(\"ColorAlbedoUniform\", Color.black)# If the country hovered, highlight it gently. func mouse_motion_country_handler(country_color_code):\tif country_color_code == Color(0,1,0) \\ # Green color\tand _current_selected_country != \"Brazil\":\t\t_brazil.material_override.set_shader_param(\"ColorAlbedoUniform\", Color.red)\telif _current_selected_country != \"Brazil\":\t\t# Reset hover effect\t\t_brazil.material_override.set_shader_param(\"ColorAlbedoUniform\", Color.black)\t\t\t\t Any code related to the camera is a combination of the asset mentioned above and the code made by the author of the reddit post - link to his repo. If you get a side-effect of non-consistent layers’ locations when moving the camera, make sure you only translate the parent node - any child’s translations should set to 0." }, { "title": "Finding Map Assets for a Grand Strategy Game", "url": "/posts/finding-map-resources-for-a-grand-strategy-game/", "categories": "Art, Map", "tags": "assets", "date": "2022-05-13 23:00:00 +0800", "snippet": "Finding the right resourcesIt took me several days to find resources that could fit together. Sometimes I could find a beautiful earth texture, but the SVGs files of the countries in Wikimedia didn’t fit. Finding a normal map to fit the texture was another challenging task. I did several combinations and weird things, but I have something good enough to work with.Texture MapNatural Earth III - A beautiful texture by Tom Patterson. According to the license: All Natural Earth III data (and images) found on this website are in the public domain. I’m using “Earth without clouds or Arctic Ocean ice”.Earth without clouds or Arctic Ocean iceNormal MapHighend3d - I’m not 100% about this, but it’s fine for now. At the time of writing, the license is MIT.Download the original to see the difference in pixelsCountries SVGThat took me the longest, and it includes two steps.Wikimedia's SVGs require heavy modifications. Natural Earth Data fits the most with common earth textures (and normal maps). However, you need to have GIS software such as QGIS. Thanks again to Tom Patterson and the various contributors behind this project. License: Public domain.Here's a direct link to the data I'm using. Also, an essential introduction to using it within QGIS. However, when you are about to export the SVG newer methods can make your life easier.Since the normal map I have doesn't emphasize the continents' depth, we can only see high terrains on the continents. As a result, the oceans and the continents seem like they are on the same height level. A quick fix is to create a normal map in Krita using the SVG from the previous step. Then we combine it with the normal map we have.SVG fits almost perfectlyGenerating a normal map in Krita from the SVG file. Combines with the original normal map, 37% opacityCombination of wireframe (Countries SVG), normalmap and texture Perhaps using Inkscape is faster since, eventually, I’ll need to edit each country separately." }, { "title": "List of +15 Serious Games. Learn New Skills in Less Time with Serious Games", "url": "/posts/list-of-serious-games-learn-new-skills-in-less-time-with-serious-games/", "categories": "General", "tags": "serious games", "date": "2022-05-06 23:00:00 +0800", "snippet": "What are Serious Games?One of Bach’s students developed one of the earliest serious games. In this game, the participant roll dices and combine musical fragments into a song.Serious games are defined as games with additional pedagogical value.The main challenge is creating a strong immersion while the player learns new skills. Serious games should not be confused with Gamification, which takes existing activities and intensifies learning satisfaction. There is no immersion.How far can we push games into the pedagogical realm while keeping players immersed? What’s even immersion?List of Some Serious GamesTechDevelopers know their realm.Shenzhen I/OShenzhen I/OGet the intuition behind developing digital circuits, from logic gates to functional devices. Some even developed Tetris in the game. Learn the basics of assembly and memory management with interactive puzzles. A great companion when taking a Computer Science introduction course such as Nand-to-Tetris.while True: learn()while True: learn()This game introduces the basic concepts, from machine learning core algorithms such as Gradient Descent and Decision Tree to deep learning. This game helps with the underneath intuition when taking a deep learning course. Consider spending some time in this game the next time you wait for your real-world neural network to finish its training.HacknetHacknetLearn about network protocols, CLI commands &amp; navigation, and some hacking concepts. The excellent soundtrack provides a unique experience.Game Dev TycoonGame Dev TycoonExperience the history of video game consoles from the early days of the Nintendo Entertainment System to PlayStation 5 in a chronologic timeline (the consoles’ names have minor changes due to copyrights). Also, develop an intuition for understanding the delicate balance of genre-platform and the investments required for publishing a game, including better graphics, sound, or even a new engine. After a game is released, a detailed report specifies if your combination went well, and if it didn’t, why.PoliticalBeyond board games.Democracy 4Democracy 4Most things aren’t black or white - they are somewhere in the middle. Learn the delicate balance to maintain your government and country.Rebel Inc.Rebel Inc.Political-military game. Stabilize a chaotic region/country by invading it (in the concept of USA-Afghanistan, Russia-Syria, etc.). Gain complete control of the region, win the trust of its citizens and rebuild civilian, government, and military infrastructures.BiologyShould I bring on-board chemists / biologists?Sim CellSim CellThis game cannot be found today except for this trailer. You play as a tiny nanobot inside a human body, learning about the different cells, curing diseases, and interacting with DNA. This game is one of the few examples of utilizing procedural soundtrack in a game. Composed by Leonard J. Paul - learn about it here.Plague Inc.Plague Inc.A widely known epidemic simulator. Get the intuition behind viruses’ evolution, how they spread, and their development to survive against human precautions. While the game ends when a vaccine is found, we know it is not exactly the case. Have you ever played Pandemic II? Check it out, perhaps it was one of their inspirations. In 2013, the CDC said that it was interested in Plague Inc. as “it uses a non-traditional route to raise public awareness on epidemiology”. Read about it on Wikipedia.AutomotiveA saturated category.Car Mechanic Simulator 2021Car Mechanic Simulator 2021Learn about different parts of various vehicles.Microsoft Flight SimulatorMicrosoft Flight SimulatorFrom physics to real-world extremely detailed airplanes. Will it replace simulators in flight schools?AgricultureFarming Simulator 2019Farming Simulator 2019Learn how to operate heavy equipment for agriculture purposes.ZoologyPlanet ZooPlanet ZooProfoundly teaches you about each animal it has. Which species can live together? What type of terrain do they need? Which species are in danger? Examine animals’ behavior and witness the research the team invested.Jurassic World EvolutionJurassic World EvolutionSame but with dinosaurs (to the extent of our current knowledge). Developed by the same studio.City PlanningCities: SkylinesCities: SkylinesA somewhat failed SimCity gave the right opportunity for the successor of Cities in Motion to raise. Learn about traffic, noise, pollution, and infrastructures. The original team had 17 members.HistoryYou already know them.Europa Universalis IVEuropa Universalis IVSet from 1444 to 1821 AD. Learn the delicate dynamics of trade and conquering, starting a war with/without Casus belli, and the consequences. Expand your empire in an experience which is similar to a board game. Based on the board game Europa Universalis from 1993. Learn about it here. From the same publisher: Crusader Kings III is set in 1066-1453. Hearts of Iron IV is centered around World War II, starting from 1936.Age of Empires (II &amp; IV)Age of Empires IVExperience historical battles. The developers pushed the fourth title into a profound pedagogical realm. 0 A.D is a FOSS 3D experience inspired by the second title. There’s no campaign (yet).Sid Meier's Civilization VCivilization VChose your civilization, expand, and develop technologies while learning which technology belongs to what era. Expand your knowledge about cultures and watch them as you expand. The franchise was inspired by a 1980 board game named Civilization. Learn about it on Wikipedia. Unciv is a recent FOSS which is inspired by the fifth title.BonusHypnospace OutlawHypnospace OutlawExperience the early days of web 1.0 with an alternative reality that builds its own unique identity. Not exactly a serious game by the book." } ]
